// Create new project
laravel new ecom
cd ecom
Create database
go to .env and add database name
php artisan serve
localhost:8000

Postmane prépare new collection

// Create new model with migration
php artisan make:model Category -m
// Go to migration category and add
$table->string("name");
$table->softDeletes(); // this will create deleted_at field for softdelete

// start the migration
php artisan migrate

// Go to model category and add 
	use HasFactory, SoftDeletes;
 protected $table = 'categories';
 protected $fillable = ['name'];

php artisan tinker
Category::create(['name' => 'téléphones']);

// Create controller
// Generate 5 methodes (INDEX - STORE - SHOW - UPDATE - DESTROY)
php artisan make:controller Api/CategoryController --resource --api --model=Category

public function index()
    {
        return Category::all();
    }

// Go to route API
Route::get('categories', [CategoryController::class, 'index']);
php artisan route:list --path=api

// Route::get('categories', [CategoryController::class, 'index']);
// Route::get('categories/{category}', [CategoryController::class, 'show']);

// Route::resource('categories', CategoryController::class);
// Route::apiResource('categories', CategoryController::class);

//Go to post man
New collection
localhost:8000/api/categories
// Add headers
Accept application/json

// Resources
php artisan make:resource CategoryResource

//Go to app/resources/CategoryResource

public function toArray($request)
    {
        return [
            'id' => $this->id,
            'name' => $this->name,
        ];
    }

// Remove key data
// Go to AppServiceProvider
use Illuminate\Http\Resources\Json\JsonResource;
public function boot()
    {
        JsonResource::withoutWrapping();
    }

// Showing error message exception

// Go to class Handler extends ExceptionHandler Handler.php

// public function register()
    // {
    //     $this->reportable(function (Throwable $e) {
    //         //
    //     });
    // }

use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
public function register()
    {
        $this->renderable(function (NotFoundHttpException $e) {
            return response()->json(['message' => 'Object not found'], 404);
        });
    }


// Stor data
// Validation 
php artisan make:request CategoryRequest

public function rules()
    {
        return [
            'name' => 'required|max:255',
            'icon' => 'required|max:255',
        ];
    }
}




// Seance sanctom

use Illuminate\Http\Response;

const HTTP_OK = 200;
const HTTP_CREATED = 201;
const HTTP_ACCEPTED = 202;
const HTTP_NO_CONTENT = 204;
const HTTP_MOVED_PERMANENTLY = 301;
const HTTP_FOUND = 302;
const HTTP_BAD_REQUEST = 400;
const HTTP_UNAUTHORIZED = 401;
const HTTP_FORBIDDEN = 403;
const HTTP_NOT_FOUND = 404;
const HTTP_METHOD_NOT_ALLOWED = 405;
const HTTP_REQUEST_ENTITY_TOO_LARGE = 413;
const HTTP_UNPROCESSABLE_ENTITY = 422;




// Register
https://laravel.com/docs/7.x/sanctum#issuing-mobile-api-tokens

php artisan make:controller Api/Auth/RegisterController

use Illuminate\Support\Facades\Hash;
use Illuminate\Validation\Rules\Password;
use App\Models\User;

public function __invoke(Request $request)
    {
        $request->validate([
            'name' => 'required|string|max:255',
            // 'email' => 'required|string|email|max:255|unique:users',
            'email' => ['required', 'string', 'email', 'max:255', 'unique:users'],
            'password' => ['required', 'confirmed', Password::default()],
            'device_name' => 'required',
        ]);

        $user = User::create([
            'name' => $request->name,
            'email' => $request->email,
            'password' => Hash::make($request->password),
        ]);

        return $user->createToken($request->device_name)->plainTextToken;
    }
// Route/api.php
Route::post('auth/register', Auth\RegisterController::class);

// To Create an acount go to postman  
POST:Auth/register
{
    "name": "admin",
    "email": "admin@gmail.com",
    "password": "admin123",
    "password_confirmation": "admin123",
    "device_name": "android"
}

// Route
Route::group(['middleware' => 'auth:sanctum'], function () {
    Route::apiResource('categories', CategoryController::class);
});
// Send request
// Headers
// Authorization      
// Bearer 1|5edlIFDG6yn1mB4wZGPbfEcMYshPy8kgvHPR4Jx9

// Postman
		name
    email
    password
    password_confirmation
    device_name





// Login

php artisan make:controller Api/Auth/LoginController

// LoginController
use App\Models\User;
use Illuminate\Http\Request;
use Illuminate\Http\Response;
use Illuminate\Support\Facades\Hash;
use Illuminate\Validation\Rules\Password;
use Illuminate\Validation\ValidationException;

public function __invoke(Request $request)
    {
        $request->validate([
            'email' => 'required|email',
            'password' => 'required',
            'device_name' => 'required',
        ]);

        $user = User::where('email', $request->email)->first();

        if (!$user || !Hash::check($request->password, $user->password)) {
            throw ValidationException::withMessages([
                'email' => ['The provided credentials are incorrect.'],
            ]);
        }

        return response()->json([
            'access_token' => $user->createToken($request->device_name)->plainTextToken,
        ], Response::HTTP_CREATED);

        // return $user->createToken($request->device_name)->plainTextToken;
        // User::create(['email' => 'user@user.com', 'password' => bcrypt('user'), 'name' => 'user']);

        // $device    = substr($request->userAgent() ?? '', 0, 255);
        // $expiresAt = $request->remember ? null : now()->addMinutes(config('session.lifetime'));

        // return response()->json([
        //     'access_token' => $user->createToken($device, expiresAt: $expiresAt)->plainTextToken,
        // ], Response::HTTP_CREATED);

    }

// Route
Route::post('auth/login', Auth\LoginController::class);

// Postman
    email
    passwor
    device_name



    Profile
php artisan make:controller Api/Auth/ProfileController
php artisan make:resource ProfileResource

// ProfileController

use Illuminate\Http\Response;
use Illuminate\Validation\Rule;
use App\Models\User;

public function show(Request $request)
    {
        return response()->json($request->user()->only('name', 'email'));
        return ProfileResource::collection(User::all());
    }

    // public function show(Request $request)
    // {
    //     return response()->json($request->user()->only('name', 'email'), Response::HTTP_OK);
    // }

    public function update(Request $request)
    {
        $validatedData = $request->validate([
            'name' => ['required', 'string'],
            'email' => ['required', 'email', Rule::unique('users')->ignore(auth()->user())],
        ]);

        auth()->user()->update($validatedData);

        return response()->json($validatedData, Response::HTTP_ACCEPTED);
    }
// Route
Route::middleware('auth:sanctum')->group(function () {
    Route::get('profile', [Auth\ProfileController::class, 'show']);
    Route::put('profile', [Auth\ProfileController::class, 'update']);
});

// Postman
// Headers
Accept application/json
Authorization Bearer 28|7ivD9xcsjDLTmHEMq70YAzplWJdV0zo9WHzTwDRp
// Loged
name
email



// Change Password
php artisan make:controller Api/Auth/PasswordUpdateController

//PasswordUpdateController

use Illuminate\Http\Response;
use Illuminate\Support\Facades\Hash;
use Illuminate\Validation\Rules\Password;

public function __invoke(Request $request)
    {
        $request->validate([
            'current_password' => ['required', 'current_password'],
            'password'         => ['required', 'confirmed', Password::defaults()],
        ]);
 
        auth()->user()->update([
            'password' => Hash::make($request->input('password')),
        ]);
 
        return response()->json([
            'message' => 'Your password has been updated.',
        ], Response::HTTP_ACCEPTED);
    }

// Route

Route::group(['middleware' => 'auth:sanctum'], function () {
    Route::put('password_update', Auth\PasswordUpdateController::class);
});

// Postman
// Loged
current_password
password
password_confirmation



// Logout
php artisan make:controller Api/Auth/LogoutController

//LogoutController
use Illuminate\Support\Facades\Auth;

public function __invoke()
    {
        // $user = User::where('id', auth()->id())->first(); // REMOVED THIS LINE
        $user = Auth::user(); // ADDED THIS LINE
        if ($user) {
            $user->tokens()->delete();
        }
				return response()->noContent(); // 204
    }

// Route
Route::post('auth/logout', Auth\LogoutController::class);